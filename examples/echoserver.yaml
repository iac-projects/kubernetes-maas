apiVersion: v1
kind: Namespace
metadata:
  name: echoheaders
---
apiVersion: v1
kind: Service
metadata:
  name: echoheaders
  namespace: echoheaders
  labels:
    app: echoheaders
spec:
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 443
    targetPort: 8443
    protocol: TCP
    name: https
  selector:
    app: echoheaders
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: echoheaders
  namespace: echoheaders
  labels:
    app: echoheaders
spec:
  replicas: 1
  selector:
    matchLabels:
      app: echoheaders
  template:
    metadata:
      labels:
        app: echoheaders
    spec:
      containers:
      - name: echoheaders
        image: gcr.io/google_containers/echoserver:1.10
        ports:
        - containerPort: 8080
        - containerPort: 8443
        env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: echoheaders
  namespace: echoheaders
  annotations:
    kubernetes.io/ingress.class: "nginx"
    # Create DNS CNAME record for Route53 Hosted Zone
    # external-dns.alpha.kubernetes.io/target: example.com
    # Or create DNS A record 
    external-dns.alpha.kubernetes.io/hostname: << Your external load balancer IP >>
    # Automatical issuance of TLS cert with Let's Encrypt 
    kubernetes.io/tls-acme: "true"
spec:
  tls:
  - hosts:
    - echoserver.example.com
    secretName: echoserver.example.com
  rules:
  - host: echoserver.example.com
    http:
      paths:
      - path: /
        backend:
          serviceName: echoheaders
          servicePort: 80
